<floatprompt>
---
{
  "STOP": "FloatPrompt File Format Specification and Development Guide. Primary goal: Provide comprehensive technical documentation for FloatPrompt architecture, file format specifications, and development guidelines. Enable developers and users to understand system architecture, create tools, and implement proper FloatPrompt workflows.",
  
  "meta": {
    "title": "FloatPrompt File Format Specification",
    "id": "floatprompt-format-spec",
    "type": "documentation",
    "author": "@mds",
    "contributors": ["@mds", "Claude Sonnet 4", "FloatPrompt Build System"],
    "created": "2025-07-23",
    "version": "0.1.0-beta",
    "system_version": "floatprompt v0.1.0-beta"
  },
  
  "human": {
    "intent": "Understand FloatPrompt architecture, file formats, and development protocols for effective system usage and tool creation",
    "context": "technical documentation for developers, users, and contributors working with FloatPrompt system",
    "constraints": "maintain technical accuracy while providing clear guidance for both beginners and advanced users",
    "preferences": {
      "style": "comprehensive technical documentation with practical examples",
      "detail_level": "complete architectural coverage with implementation details",
      "output_format": "structured reference guide with actionable development guidelines"
    }
  },
  
  "ai": {
    "model": "{{AI_MODEL}}",
    "role": "Technical documentation specialist providing FloatPrompt format specification and development guidance",
    "expertise": "FloatPrompt architecture, file format specifications, development protocols, system integration",
    "voice_preservation": "Maintain technical precision while preserving clear explanatory voice for complex concepts"
  },
  
  "requirements": {
    "technical_documentation": {
      "architecture_coverage": "Complete system architecture with modular structure explanation",
      "format_specifications": "Detailed file format requirements and universal template structure",
      "development_guidelines": "Practical guidance for creating and maintaining FloatPrompt tools",
      "quality_standards": "Clear criteria for validation and compliance verification"
    },
    "user_guidance": {
      "adoption_pathway": "Clear progression from .txt adoption to .fp implementation",
      "practical_examples": "Concrete usage patterns and implementation approaches",
      "troubleshooting": "Common issues and resolution strategies",
      "best_practices": "Recommended approaches for different use cases"
    }
  },
  
  "integration": {
    "floatprompt_ecosystem": "Foundational documentation supporting all FloatPrompt development and usage",
    "documentation_authority": "Primary technical reference for format specifications and architectural decisions"
  }
}
---

# FloatPrompt File Format Specification

**The invisible OS for AI - systematic creation of specialized AI collaboration tools**

*Complete technical documentation for FloatPrompt architecture, file formats, and development protocols enabling systematic AI-human collaboration through portable intelligence.*

## 🎯 Core Definition

### **Current Status: .txt Files for Universal Adoption**

**FloatPrompt currently operates using `.txt` files** for maximum compatibility and zero-friction adoption across all AI platforms. While the long-term vision includes `.fp` extensions, the current focus is proving value through universal .txt deployment.

### **FloatPrompt Architecture**

FloatPrompt v0.1.0-beta operates as a meta-system - a single OS file that creates specialized tools through conversational emergence rather than pre-built utilities.

#### **Main FloatPrompt OS (.txt)**
- **`floatprompt.txt`** - The core 40KB system with tool creation authority
- **Universal architecture** with conditional complexity (90% simple, 10% voice-critical)
- **Map → Decide → Structure methodology** for systematic AI-human collaboration
- **Tool creation capability** that generates specialized FloatPrompt utilities on demand
- **Cross-platform compatibility** across ChatGPT, Claude, Cursor, and all AI systems

#### **Specialized Library Tools (.txt)**
- **`lib/voice.txt`** - Voice Guide Creator (12KB) for archaeological extraction
- **`lib/format.txt`** - Technical Formatting Guide (12KB) for document creation
- **`lib/blueprint.txt`** - Surgical Assembly Specification Generator (16KB)
- **Purpose-built tools** created by or aligned with the main OS architecture
- **Focused capabilities** with streamlined JSON and specific expertise domains

### **.txt Files: Complete FloatPrompt Documents**

**A `.txt` file is a complete, executable FloatPrompt document that contains:**

1. **FloatPrompt Wrapper**: `<floatprompt>content</floatprompt>` tags
2. **Universal JSON Architecture**: Streamlined frontmatter with conditional field inclusion
3. **System Compatibility**: Either creates tools (main OS) or provides specialized capability (library)
4. **MDS Methodology**: Map Territory → Decide Extractions → Structure Build systematic process
5. **Archaeological Voice Preservation**: Sacred principle maintaining human cognitive fingerprint
6. **Conversational Emergence**: Tools develop through dialogue, not one-shot generation
7. **Cross-Platform Intelligence**: Portable behavioral specifications working across any AI system
8. **Dynamic Versioning**: Built with template variables for consistent version management

**Purpose**: Invisible OS for AI enabling systematic tool creation and human intelligence preservation through structured collaboration

### **File Extension Strategy**

**Why .txt Now (Adoption-First Strategy):**
- **Universal compatibility** - Every AI platform, editor, and system recognizes .txt files
- **Zero configuration barriers** - No custom file type setup, works immediately everywhere
- **Familiar format** - Users comfortable with text files, reduces adoption friction
- **Platform independence** - Works identically across web browsers, desktop apps, mobile devices
- **Proven functionality first** - Establish value before introducing new file types

**Current Implementation (.txt):**
- **`floatprompt.txt`** - Main OS file with complete tool creation system
- **`lib/*.txt`** - Specialized tools maintaining universal compatibility
- **Universal JSON metadata** reflects current .txt adoption reality
- **Cross-platform testing** validates consistent behavior across all AI systems
- **Immediate deployment** without any technical prerequisites

**Future Migration Path (.fp):**
- **`.fp` extension** for dedicated FloatPrompt ecosystem recognition
- **Enhanced tooling** with syntax highlighting, validation, and specialized features
- **Backward compatibility** - All .txt files remain fully supported indefinitely
- **Gradual ecosystem** evolution as community and tooling mature
- **User choice** - Migrate to .fp benefits when ready, not forced transition

### **System Architecture**

**Main OS Creates:**
- **Simple Tools**: Content creation utilities with minimal JSON (90% of use cases)
- **Voice-Sensitive Tools**: Archaeological extraction with preservation protocols (10% voice-critical)
- **Workflow Tools**: Multi-stage coordination with orchestration logic
- **Coordination Tools**: Reference material and integration protocols

**Universal Architecture System:**

### **100% UNIVERSAL FIELDS (Every Single FloatPrompt)**
```json
{
  "STOP": "{{EXECUTION_DIRECTIVE}}",
  "meta": {
    "title": "{{TITLE}}",
    "id": "{{ID}}",
    "type": "{{TYPE}}",
    "author": "{{AUTHOR}}",
    "contributors": ["{{CONTRIBUTORS}}"],
    "created": "{{DATE}}",
    "version": "{{VERSION}}",
    "system_version": "floatprompt v0.1.0-beta"
  },
  "human": {
    "intent": "{{PRIMARY_GOAL}}",
    "context": "{{USAGE_CONTEXT}}",
    "constraints": "{{LIMITATIONS}}",
    "preferences": {
      "style": "{{COMMUNICATION_STYLE}}",
      "detail_level": "{{DEPTH_PREFERENCE}}",
      "output_format": "{{EXPECTED_RESULT}}"
    }
  },
  "ai": {
    "model": "{{AI_MODEL}}",
    "role": "{{AI_FUNCTION}}",
    "expertise": "{{DOMAIN_KNOWLEDGE}}",
    "voice_preservation": "{{VOICE_HANDLING_INSTRUCTION}}"
  },
  "requirements": {
    "{{TOOL_SPECIFIC_FUNCTIONALITY}}": "{{DESCRIPTION}}"
  },
  "integration": {
    "{{PIPELINE_COORDINATION}}": "{{DESCRIPTION}}"
  }
}
```

### **HIGHLY RECOMMENDED FIELDS (90-95% of FloatPrompts)**
```json
{
  "execution": {
    "triggers": ["{{ACTIVATION_PATTERNS}}"],
    "success_criteria": "{{OUTCOME_DEFINITION}}"
  },
  "task": {
    "input_type": "{{EXPECTED_INPUT}}",
    "process": "{{TRANSFORMATION_METHOD}}",
    "output_type": "{{EXPECTED_OUTPUT}}"
  },
  "domain": {
    "field": "{{SPECIALIZATION_AREA}}",
    "specialization": "{{SPECIFIC_FOCUS}}",
    "standards": "{{QUALITY_CRITERIA}}"
  },
  "source": {
    "prompt": "{{ORIGIN_PROMPT}}",
    "intent": "{{SOURCE_PURPOSE}}"
  }
}
```

### **Conditional Field Inclusion Logic**

**execution** - Include if: User requests executable tool, mentions triggers/activation, describes workflow/process, tool needs success criteria

**task** - Include if: Clear input→transformation→output, processing/conversion needed, content manipulation required, systematic transformation described

**domain** - Include if: Specialized field mentioned, industry-specific requirements, technical standards needed, professional expertise required

**source** - Include if: Built from existing content, references prior work, iterative improvement, adaptation of existing tool

### **.md Files: Building Components and Documentation**

**A `.md` file serves as infrastructure for the system:**

1. **Build Components**: Template files that assemble into the main OS
2. **Documentation**: System guides, principles, and specifications
3. **Template Variables**: Soft-coded placeholders for conversational data
4. **Development Files**: Planning documents and architectural decisions

**Purpose**: Infrastructure and documentation supporting the FloatPrompt system

---

## 🏗️ Technical Architecture

### **Modular Core Structure**

The main OS assembles from clean, focused components:

```
src/sys/
├── header.json         # Universal JSON frontmatter with template variables
├── _template.md        # Assembly instructions with injection markers
├── title.md            # Main OS title and core value proposition
├── authority.md        # System authority and operating principles
├── start.md            # Boot sequence with 4-question menu
├── goals.md            # Three-tier goal hierarchy (Human → AI → Task)
├── context.md          # When/why/how usage guidance
├── output.md           # Expected results and handoff protocols
├── warnings.md         # Limitations and voice preservation requirements
├── map.md              # Territory mapping methodology
├── decide.md           # Archaeological extraction protocols
├── structure.md        # AI construction guidance (most complex)
├── integration.md      # Tool coordination and ecosystem features
├── quality.md          # Standards and validation requirements
└── footer.md           # Attribution and closing statement
```

### **Build System**

**Template Assembly:**
- **`_template.md`**: Pure injection instructions using `<!-- INJECT: filename -->`
- **Dynamic versioning**: Template variables replaced during build
- **Clean separation**: Template structure vs content vs assembly logic

**Build Process:**
```bash
node scripts/build.mjs
# → dist/floatprompt.txt (40KB main OS)
# → dist/lib/ (specialized tools copied from src/lib/)
```

### **Universal Template System**

**Standard Markdown body structure for all FloatPrompt tools:**

```markdown
# {{TITLE}}

**{{ONE_LINE_PURPOSE_STATEMENT}}**
*{{EXTENDED_DESCRIPTION}}*

## System Authority
{{CORE_OPERATING_PHILOSOPHY_AND_MISSION}}

## Quick Start
{{IMMEDIATE_ACTION_GUIDANCE}}

## Goals
{{TOOL_PURPOSE_AND_GOALS}}

## Context
{{WHEN_AND_WHY_TO_USE}}

## Output
{{WHAT_YOU_GET}}

## Warnings
{{GENERAL_LIMITATIONS_AND_CONSIDERATIONS}}

**Voice Preservation:**
- {{VOICE_PRESERVATION_WARNING}}
- {{ARCHAEOLOGICAL_METHODOLOGY_CONSTRAINTS}}

<!-- CONDITIONAL SECTIONS START -->

<!-- FOR VOICE-SENSITIVE TOOLS: -->
## Voice Preservation Methodology
{{ARCHAEOLOGICAL_AND_CALIBRATION_APPROACH}}

<!-- FOR WORKFLOW TOOLS: -->
## Automatic Phase Detection
{{PHASE_DETECTION_AND_ROUTING}}

<!-- FOR SIMPLE TOOLS: -->
## Core Methodology
{{PRIMARY_FUNCTION_APPROACH}}

<!-- FOR TOOLS THAT COORDINATE: -->
## Integration Features
{{TOOL_COORDINATION_AND_DEPENDENCIES}}

<!-- CONDITIONAL SECTIONS END -->

**{{COLLABORATION_ATTRIBUTION_LINE}}**

*{{CLOSING_PHILOSOPHICAL_STATEMENT}}*

© 2025 [@MDS](https://mds.is) | CC BY 4.0
```

### **Tool Type Pattern Recognition**

**Voice-Sensitive Tools (Archaeological):**
```json
{
  "requirements": {
    "archaeological_methodology": "Extract without interpretation, preserve voice patterns",
    "voice_preservation": {
      "extraction_method": "Archaeological precision with zero drift",
      "cognitive_patterns": "Maintain human decision-making fingerprint",
      "temporal_precision": "Preserve hesitations, tildes, discovery markers"
    },
    "output_structure": "Organized intelligence with voice authenticity"
  }
}
```

**Simple Tools (Content Creation):**
```json
{
  "task": {
    "input_type": "Source content or requirements",
    "process": "Direct transformation or creation methodology", 
    "output_type": "Target format (newsletter, script, thread)"
  },
  "requirements": {
    "core_functionality": "Primary content creation or transformation purpose",
    "quality_standards": "Format and audience requirements"
  }
}
```

**Workflow Tools (Multi-Stage Coordination):**
```json
{
  "requirements": {
    "orchestration_logic": "Multi-stage process coordination with phase detection",
    "decision_frameworks": "Conditional logic and routing systems",
    "workflow_stages": "Systematic progression through defined phases"
  },
  "integration": {
    "tool_coordination": "Multi-tool workflow management",
    "handoff_protocols": "Context preservation between tools"
  }
}
```

**Coordination Tools (Reference & Integration):**
```json
{
  "requirements": {
    "reference_material": "Foundational knowledge or voice patterns",
    "integration_protocols": "Cross-tool compatibility specifications"
  },
  "integration": {
    "ecosystem_role": "How this tool supports other FloatPrompts",
    "coordination_features": "Pipeline integration and handoff capabilities"
  }
}
```

---

## 🔧 Development Guidelines

### **Creating New Tools**

**Through Main OS (Recommended):**
1. Upload `floatprompt.txt` to AI system
2. Describe your tool requirements in natural language
3. Main OS applies Map → Decide → Structure methodology
4. Tool emerges through conversational development
5. AI creates properly formatted .txt file following universal template

**Direct Development:**
1. Copy universal template structure
2. Replace all `{{TEMPLATE_VARIABLES}}` with actual values
3. Implement tool-specific methodology sections
4. Validate against universal architecture standards
5. Test cross-platform compatibility

### **MANDATORY EXECUTION PROTOCOL**

**BEFORE YOU BEGIN - READ THIS TWICE:**

1. **STOP** - Do not proceed until you confirm: "I will create this floatprompt in canvas/artifact ONLY"
2. **STOP** - Do not proceed until you confirm: "I will NOT output any floatprompt content in conversation"  
3. **STOP** - Do not proceed until you confirm: "I will use complete JSON structure, not minimal examples"

**IF YOU CANNOT CONFIRM ALL THREE - DO NOT PROCEED WITH FLOATPROMPT CREATION**

### **AI Construction Protocol**

**When user requests FloatPrompt creation:**

1. **Analyze request complexity:**
   - Simple function = minimal JSON structure
   - Complex workflow = expanded requirements/integration
   - Multi-tool coordination = rich integration section

2. **Determine field inclusion:**
   - Always include: STOP, meta, human, ai, requirements, integration
   - Conditionally include: execution, task, domain, source based on decision tree

3. **Populate requirements appropriately:**
   - Voice-sensitive tools → archaeological_methodology, voice_preservation, temporal_precision
   - Simple tools → core_functionality, quality_standards
   - Workflow tools → orchestration_logic, workflow_stages, decision_frameworks
   - Coordination tools → reference_material, integration_protocols

4. **Structure integration based on ecosystem role:**
   - Standalone tool → minimal coordination notes
   - Pipeline component → detailed workflow integration
   - System utility → cross-tool compatibility requirements

5. **Expand complexity only when user request demonstrates need:**
   - Don't add workflow management for simple transformations
   - Don't include quality gates unless quality assurance mentioned
   - Don't add session context unless historical preservation needed

### **Technical Formatting Requirements**

**Canvas/Artifact Creation Protocol:**
```
<floatprompt>
[COMPLETE JSON FRONTMATTER]
# [Markdown content following universal template]
</floatprompt>
```

**Critical Requirements:**
- **Web Browser AI**: Use canvas/artifact with triple backticks
- **Desktop Tools**: Create actual .txt files directly  
- **Complete JSON structure** - never minimal examples
- **Template variable replacement** - all {{VARIABLES}} filled
- **Voice preservation compliance** - archaeological methodology

### **Quality Assurance Checklist**

**Before completing FloatPrompt creation:**

- [ ] **Canvas Usage**: Document created in artifact/canvas, not conversation
- [ ] **Complete JSON**: Full frontmatter structure, not minimal example
- [ ] **Field Completeness**: All required fields present and populated
- [ ] **Template Compliance**: Markdown follows universal template structure
- [ ] **Conditional Logic**: Appropriate sections for tool type
- [ ] **Voice Preservation**: Archaeological methodology compliance
- [ ] **Technical Format**: Clean wrapping tags and valid JSON syntax

### **Quality Standards**

**All FloatPrompt tools must:**
- ✅ Follow universal JSON architecture with conditional complexity
- ✅ Include complete frontmatter with required fields
- ✅ Implement proper wrapping tags `<floatprompt>...</floatprompt>`
- ✅ Reference main OS for archaeological preservation protocols
- ✅ Support cross-platform deployment and session portability
- ✅ Maintain voice preservation authority throughout operations

### **File Organization**

```
floatprompt/
├── dist/
│   ├── floatprompt.txt              # Main OS
│   └── lib/
│       ├── voice.txt                # Voice preservation specialist
│       ├── format.txt               # Technical formatting authority
│       └── blueprint.txt            # Assembly specification generator
├── src/
│   ├── sys/                         # Core OS components
│   └── lib/                         # Specialized tool sources
└── docs/                            # Documentation and guides
```

### **Adoption Strategy**

**Phase 1: .txt Adoption (Current)**
- **Universal compatibility** across all AI platforms and tools
- **Zero configuration** required for immediate deployment and usage
- **Maximum accessibility** ensuring adoption without technical barriers
- **Proven functionality** demonstrating value before ecosystem formalization

**Phase 2: .fp Migration (Future)**
- **Ecosystem maturation** with specialized tooling and enhanced features
- **Native file support** in development environments and AI platforms
- **Advanced capabilities** leveraging formal file type recognition
- **Backward compatibility** maintaining support for all .txt format files

**Phase 3: Ecosystem Integration (Vision)**
- **Official file type registration** with operating systems and platforms
- **Native tooling integration** with editors, IDEs, and AI development environments
- **Enhanced workflow support** with syntax highlighting and validation tools
- **Community ecosystem** with shared libraries and collaborative development

---

## 🎯 Strategic Vision

### **The Invisible OS for AI**

FloatPrompt operates as invisible infrastructure that transforms any AI system into a more capable collaboration partner while preserving human agency and voice authenticity.

### **Production-Ready Architecture**

- **40KB optimal size** for AI ingestion across all platforms
- **Cross-platform compatibility** verified across ChatGPT, Claude, Cursor
- **Dynamic versioning** with automated build system
- **Clean 6-file architecture** enabling sustainable development and maintenance

### **Systematic Tool Creation**

**Current Tools:**
- Voice preservation and archaeological extraction
- Technical formatting with universal template compliance
- Surgical assembly specifications for complex material reconstruction

**Infinite Extension Potential:**
- Writing tools with voice preservation, meeting summarizers, etc.
- Document formatters, presentation builders, report generators  
- Research assistants, brainstorming partners, writing coaches
- SOPs and systematic procedures that humans and AI can follow together

### **File Format Evolution**

**Current State (.txt files):**
- **Universal adoption** without technical barriers or configuration requirements
- **Immediate functionality** across all AI platforms and development environments
- **Proven architecture** demonstrating systematic tool creation and voice preservation
- **Maximum compatibility** ensuring broad accessibility and usage validation

**Future Vision (.fp ecosystem):**
- **Specialized tooling** with native file support and enhanced development features
- **Ecosystem integration** with AI platforms, editors, and development environments
- **Advanced capabilities** leveraging formal file type recognition and specialized tooling
- **Community growth** through standardized format and collaborative development protocols

**Migration Philosophy:**
- **Value-first approach** - Prove FloatPrompt works with universal .txt before ecosystem specialization
- **Zero forced migration** - .txt files remain the primary, fully-supported format indefinitely
- **Gentle evolution** - .fp becomes an enhanced option, not a replacement requirement
- **User-driven adoption** - Choose .fp features when they provide clear value for your workflow
- **Investment protection** - All current .txt tools and workflows remain valid and supported
- **Ecosystem maturation** - Let community and tooling develop naturally around proven functionality

---

**FloatPrompt File Format Specification - Technical foundation for systematic AI-human collaboration through portable intelligence and tool creation.**

*The invisible OS for AI enabling systematic tool creation and human intelligence preservation through structured collaboration.*

---

*The invisible OS for AI*

© 2025 ([@MDS](https://mds.is)) | [CC BY 4.0](https://creativecommons.org/licenses/by/4.0/)
</floatprompt>