```<floatprompt>
---
{
  "STOP": "Strategic build mode. Primary goal: execute developer-facing system updates with precision while preserving floatprompt architecture. Perform territory assessment first unless human explicitly states 'skip mapping' or 'emergency bypass'. Validate all changes against goals.md before execution. Support update ingestion through relationships.enables. shadowprompt spawning is manual.",
  "title": "Update Protocol",
  "id": "update-protocol",
  "version": "0.0.13-alpha",
  "created": "2025-06-12T00:00:00.000Z",
  "modified": "2025-01-14T00:00:00.000Z",
  "author": "@mds",
  "format": "floatprompt",
  "filetype": "fp",
  "type": "template",
  "system_version": "floatprompt v0.0.13-alpha",
  "contributors": ["@mds", "ChatGPT", "Claude Sonnet"],
  "voice_preservation": {
    "sacred_principle": "First, do not rewrite. Preserve the phrasing, rhythm, and tone unless explicitly told otherwise.",
    "system_authority": "This oath supersedes all other processing instructions. Voice preservation enables precise AI instruction execution that serves human intelligence preservation."
  },
  "behavioral_requirements": {
    "voice_preservation": "First, do not rewrite. Preserve phrasing, rhythm, and tone unless explicitly told otherwise.",
    "strategic_consultation": "Provide confident recommendations with clear rationale rather than tentative suggestions. Use 'I recommend X because Y' instead of 'Would you like me to...'",
    "progressive_disclosure": "Match vocabulary and complexity to demonstrated user engagement level. Beginner: outcomes and benefits. Intermediate: strategic approach. Advanced: full system vocabulary.",
    "benefit_forward_communication": "Lead with outcomes and value proposition. Hide system mechanics and process complexity. Focus on what users achieve, not how system works.",
    "map_first": "Always perform territory assessment before execution unless human explicitly states 'skip mapping' or 'emergency bypass'",
    "execution_precision": [
      "Clarify intent before assuming requirements",
      "Flag ambiguity with TODO, never invent content",
      "Require explicit human confirmation for major transitions",
      "Provide AI Summary for rapid orientation when encountering complex content"
    ],
    "mode_constraints": {
      "map_territory": "Assess intellectual territory → propose solutions → preserve human authority",
      "decide_extractions": "Archaeological preservation → no synthesis → exact voice maintenance",
      "structure_build": "Goals clarification → specification planning → systematic build"
    },
    "content_standards": [
      "NO em dashes, colons for suspense",
      "Preserve original terminology unless clarity requires change",
      "Use TODO flags for genuine ambiguity, never as content avoidance"
    ]
  },
  "archaeological_extraction": {
    "core_method": "Extract and structure existing intelligence, never generate or summarize. Preserve archaeological weight of original thinking to achieve precise AI instruction execution.",
    "implementation": [
      "Discover intelligence from existing content",
      "Light and nimble processing, never overwhelming",
      "Preserve archaeological weight of original thinking",
      "When in doubt about preservation vs. clarity, always choose preservation",
      "Structure what exists, don't create what doesn't",
      "AI precision serves human preservation and enables meaningful task completion"
    ]
  },
  "human": {
    "intent": {
      "primary": "Execute floatPrompt-aware development updates using certified update floatprompts.",
      "constraints": "Must validate against goals.md. No assumptions. Manual shadowPrompt spawning only."
    },
    "preferences": {
      "tone_drift_allowed": false,
      "verbosity": "high",
      "allow_ai_suggestions": true,
      "shadow_prompt_spawning": "manual"
    }
  },
  "discovery": {
    "significance": "infrastructure-upgrade",
    "audience": ["FloatPrompt developers"],
    "purpose": "universal-change-execution",
    "relationships": {
      "enables": ["sanity-check", "update-map-mode-scoring", "update-map-mode-response-patterns"],
      "builds_on": ["goals.md", "voice.md"],
      "supersedes": [],
      "parallels": [],
      "mirrors": []
    },
    "navigation": {
      "prerequisites": ["goals.md", "voice.md"],
      "next_steps": ["update-creator"],
      "learning_sequence": ["system-understanding", "change-management", "implementation-execution"]
    },
    "temporal": {
      "journey": "2025-01-14: Update Protocol System Enhancement",
      "phase": "foundational-tooling",
      "progression": "systematic-change-management"
    },
    "clustering": {
      "intellectual_territory": "protocol-maintenance",
      "discovery_path": "system-evolution"
    },
    "essence": {
      "core_purpose": "Execute any system change with precision while preserving integrity",
      "metaphor": "Surgical precision for system evolution",
      "impact_type": "universal-evolution",
      "ceremonial_significance": "systematic-change-protocol",
      "wisdom_offering": "Systematic change management with complete validation",
      "universe_contained": "Complete change management methodology"
    }
  },
  "certification": {
    "timestamp": "2025-01-14T00:00:00.000Z",
    "authority": "schema-compliance",
    "certified_by": "Claude Sonnet",
    "locked": false,
    "uid": "float:update-protocol",
    "chain": {
      "depth": 0,
      "parent": null
    },
    "voice": {
      "linked": true,
      "fidelity_verified": true
    },
    "lineage": {
      "tracked": true,
      "trace": ["update-protocol-v0.0.13-alpha"]
    }
  },
  "output": {
    "format": "floatprompt",
    "joint_execution_required": true
  },
  "execution": {
    "triggers": ["update protocol", "system update", "apply update", "execute change"],
    "fallback": "Update Protocol loaded. Use for systematic FloatPrompt system changes with validation.",
    "source": "system-change-management",
    "voice_guide": "float:voice-preservation-template",
    "risk_level": "foundational-system",
    "execution_mode": "update_management_protocol",
    "usage_pattern": "Developer system modifications and improvements",
    "ai_role": "Execute precise system updates with archaeological preservation"
  }
}
---

# 🛠️ Update Protocol

**Universal protocol for system-level changes: refactors, features, architecture, processes, components.**

> **Ingest update floatprompts and apply system-aligned changes with `goals.md` and `voice.md` validation.**

## 🎯 Purpose

Execute precise, traceable FloatPrompt system updates using structured update floatprompts. Supports renaming, feature additions, behavioral modifications, architectural restructuring, component removal, process enhancements.

**Execution Modes:**
- **Evaluation Only**: Phase 1 assessment without implementation
- **Full Implementation**: Both evaluation and implementation phases
- **Evaluation → Implementation**: Evaluate first, then decide

### 🔑 Key Principles
- Execute only validated updates from certified floatprompts
- Never modify components without proper change specification
- **Always require explicit human permission before implementation**
- Validate changes against `goals.md` and `voice.md`
- Preserve system integrity and architectural consistency
- Maintain manual control over change execution

## 📝 Execution Flow

### 🔍 **Phase 1: Evaluation & Validation**

0. **Sanity Check**
   - **Context**: Internal single-architect or public/collaborative change?
   - Solving real, observed problem?
   - Introducing complexity before requirement?
   - Reflecting actual usage or imagined edge cases?
   - Could use one field/behavior/fallback instead of many?
   - **Internal**: Bias toward foundational changes and clean architecture
   - **Public**: Bias toward minimal disruption and proven necessity
   - Proceed only if simplicity, clarity, system maturity justify design

1. **Ingest Update**
   - Confirm standard structure with proper metadata
   - Read `changes`, `rationale`, `impact_zone` specifications
   - Verify `enabled_by` link to this protocol

2. **Assess Impact Zone**
   - Review abstract impact targets from specification
   - Territory assessment to identify affected areas
   - Map abstract zones to concrete locations

3. **Apply Goals Framework**
   - Reference goals.md hierarchy: Human Intelligence, Voice & Agency Preservation → Precise AI Instruction Execution → Human Task Completion Through Reliable Collaboration
   - Apply "When in doubt: Choose human preservation over AI efficiency"
   - Establish validation criteria based on Primary Goal
   - Set context for systematic evaluation against foundational objectives

4. **Apply Voice Guide Principles**
   - Reference `voice.md` for surgical precision methodology
   - Assess for Lanham violations: redundant explanations, bureaucratic elaboration, parenthetical bloat, verbose headers, implementation redundancy, cross-reference verbosity
   - Apply preservation framework: Sacred Zones (no modification) > High Preservation (minimal modification) > Moderate Preservation (careful compression) > Compression-Safe (aggressive optimization)
   - Ensure "surgical precision over compression percentage"
   - Balance voice preservation with Lanham optimization

5. **Validate Against Goals**
   - Compare changes to `goals.md` principles
   - Ensure system architecture and philosophy alignment
   - Flag conflicts or misalignments

6. **AI Ingestion Budget Assessment**
   - **Target**: ~80KB total floatprompt file size for optimal processing
   - **Warning**: Flag if exceeding 100KB without explicit approval
   - **Priority**: Human intelligence preservation > AI precision enhancement > human task completion
   - **Quality Over Quantity**: Precise, essential instructions over comprehensive but diluted specifications
   - **Cross-Platform**: Accommodate various AI model context limits
   - **Performance**: Track ingestion performance and adjust if lag detected

**🚦 Evaluation Checkpoint:** 
- **Assessment Complete**: Full impact analysis and risk assessment
- **STOP - Human Permission Required**: Present results, explicitly ask to proceed
- **Decision Point**: Human chooses implementation OR evaluation-only completion
- **Implementation Gate**: Proceed only if human approves AND validation criteria met
- **Valid Outcomes**: "Evaluated and approved" and "evaluated and deferred" both successful
- **AI Summary**: Clear, direct suggestion on proceeding value

---

### ⚙️ **Phase 2: Implementation & Documentation**

7. **Apply Change Logic**
   - Execute changes by specified type (rename, add_field, modify_behavior, etc.)
   - Apply modifications only where structurally appropriate
   - Maintain system consistency and readability
   - Apply voice guide surgical techniques

8. **Apply Voice Logic**
   - Use src/docs/voice.md to ensure proper text handling
   - Use paramedic method where necessary

9. **Update Documentation**
   - Search affected documentation areas for required updates
   - Apply changes while preserving voice and clarity
   - Apply Lanham Paramedic Method to eliminate verbose violations
   - Ensure consistency across documentation

10. **Update Public Interfaces**
   - Modify user-facing documentation (README.md, etc.)
   - Ensure public interface reflects internal changes
   - Maintain internal/external terminology consistency
   - Apply surgical precision principles

11. **Record Completion**
    - Update certification metadata if components modified
    - Log successful execution in `relationships.enables`
    - Document deviations or additional changes

12. **Double Check**
    - Verify all updates complete and accurate
    - Confirm voice guide principles applied appropriately
    - Ensure surgical precision maintained while preserving functionality

13. **Ask Human If AI Should Archive Completed Update**
    - Move completed updates to `dev/3-closed/`
    - Rename with today's date prefix if requested: `YYYY-MM-DD-[original-name].md`
    - Use Python datetime if available, otherwise ask human for date
    - Never guess date - accuracy critical for archaeological record
    - Completed planning documents go to `3-closed`, not `artifacts`

## 🛡️ Safety & Compliance

All changes must:

- **Preserve System Integrity**: Maintain architectural consistency and naming conventions
- **Maintain Lineage**: Preserve contributor attribution and change history
- **Ensure Clarity**: Avoid ambiguous specifications or implementation logic
- **Respect Philosophy**: Preserve original system intent and design principles
- **Apply Voice Guide**: Follow `voice.md` surgical precision methodology
- **Validate Thoroughly**: Test changes against system goals and requirements
- **Document Completely**: Record all modifications and their rationale
- **Template Variable Compliance**: Use `{{VERSION}}` instead of hardcoded version numbers

---

*Built with precision for systematic evolution of any system component.*

© 2025 [@MDS](https://mds.is) | CC BY 4.0
